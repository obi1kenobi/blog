<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title> - rust</title>
    <link href="https://blog.mcarr.one/tags/rust/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://blog.mcarr.one"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-05-27T00:00:00+00:00</updated>
    <id>https://blog.mcarr.one/tags/rust/atom.xml</id>
    <entry xml:lang="en">
        <title>How do Rust tools handle lint configuration?</title>
        <published>2024-05-27T00:00:00+00:00</published>
        <updated>2024-05-27T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://blog.mcarr.one/rust-lint-config/" type="text/html"/>
        <id>https://blog.mcarr.one/rust-lint-config/</id>
        
        <content type="html">&lt;p&gt;As I start to work on &lt;a href=&quot;https:&#x2F;&#x2F;blog.mcarr.one&#x2F;gsoc-24-intro&#x2F;&quot;&gt;adding more lint configuration&lt;&#x2F;a&gt; to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&quot;&gt;&lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, I&#x27;ve been exploring the different ways that tools like &lt;code&gt;rustc&lt;&#x2F;code&gt;, &lt;code&gt;clippy&lt;&#x2F;code&gt;, and &lt;code&gt;cargo&lt;&#x2F;code&gt; handle linting and configuring the levels of each of their lints to make it more consistent for &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;&#x27;s configuration.
Some of it is internal compiler code that we can&#x27;t really reuse, but there are crates like &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;annotate_snippets&quot;&gt;&lt;code&gt;annotate-snippets&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; are being developed to make it easier and more consistent to create linting tools (in this case, by providing an interface to render diagnostics).
We can also copy&#x2F;take inspiration from the interfaces (e.g., command-line flags) of rustc and clippy to make configuration more consistent.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;lint-levels&quot;&gt;lint levels&lt;&#x2F;h1&gt;
&lt;p&gt;The biggest part of configuring lints is to specify how big a problem it is when this lint occurs. If we should raise an error, that&#x27;s &lt;code&gt;deny&lt;&#x2F;code&gt;. If it should just be a warning: aptly &lt;code&gt;warn&lt;&#x2F;code&gt;. And if, through our configuration or the default configuration, it should not error or raise a warning when this lint is triggered, we &lt;code&gt;allow&lt;&#x2F;code&gt; that lint.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-secret-fourth-option&quot;&gt;a secret fourth option&lt;&#x2F;h2&gt;
&lt;p&gt;There&#x27;s another option in &lt;code&gt;rustc&lt;&#x2F;code&gt;, though, that is even stricter. If we &lt;code&gt;forbid&lt;&#x2F;code&gt; a lint, it&#x27;s like a stricter version &lt;code&gt;deny&lt;&#x2F;code&gt;ing it. There are a &lt;a href=&quot;https:&#x2F;&#x2F;blog.mcarr.one&#x2F;rust-lint-config&#x2F;#configuration&quot;&gt;lot of ways&lt;&#x2F;a&gt; to configure lints tools like &lt;code&gt;rustc&lt;&#x2F;code&gt; and &lt;code&gt;clippy&lt;&#x2F;code&gt;, and sometimes you &lt;code&gt;deny&lt;&#x2F;code&gt; a lint (such as the &lt;code&gt;unsafe-code&lt;&#x2F;code&gt; lint) at the module level, for example, but you can still &lt;code&gt;allow&lt;&#x2F;code&gt; or &lt;code&gt;warn&lt;&#x2F;code&gt; an individual &lt;code&gt;unsafe&lt;&#x2F;code&gt; block. If we want to prevent this from happening, we can &lt;code&gt;#![forbid(unsafe_code)]&lt;&#x2F;code&gt;, and this lint will now &lt;em&gt;always&lt;&#x2F;em&gt; be an error, regardless&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#forbid&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; of other configuration that would otherwise override a &lt;code&gt;deny&lt;&#x2F;code&gt; level.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-fifth-one&quot;&gt;a fifth one?&lt;&#x2F;h2&gt;
&lt;p&gt;This one was actually new to me when I was reading the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;rustc&#x2F;lints&#x2F;levels.html&quot;&gt;rustc lints page&lt;&#x2F;a&gt;. Similar to &lt;code&gt;forbid&lt;&#x2F;code&gt;, there is a &lt;code&gt;force-warn&lt;&#x2F;code&gt; level that will always make a lint emit a warning, even if it is configured to be &lt;code&gt;allow&lt;&#x2F;code&gt; &lt;em&gt;or&lt;&#x2F;em&gt; &lt;code&gt;deny&lt;&#x2F;code&gt; at a higher-precedence config. Unlike &lt;code&gt;forbid&lt;&#x2F;code&gt;, though, &lt;code&gt;force-warn&lt;&#x2F;code&gt; can&#x27;t even be suppressed by &lt;code&gt;--cap-lints allow&lt;&#x2F;code&gt;. However, it can&#x27;t be set by an attribute like the other ones, and I personally have not seen it used in the wild yet.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;looking-at-cargo-semver-checks&quot;&gt;looking at &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The first three are unambiguously necessary to add to &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; to me, as the whole point of adding this more granular configuration to be able to specify the level of each check.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;d love feedback on &lt;code&gt;forbid&lt;&#x2F;code&gt;, though. It requires special handling (to be able to override later configuration on the same lint), and right now, the initial plan is to only add three places to configure the lint: workspace and package &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt; as well as through CLI flags, so adding it might not be as necessary as in &lt;code&gt;rustc&lt;&#x2F;code&gt;, where every module and submodule and item and field can have their own configuration, so it&#x27;s a lot more helpful to be able to override something at an outer level.&lt;&#x2F;p&gt;
&lt;p&gt;That being said, if we do add module-level lint configuration, it might be helpful to have &lt;code&gt;forbid&lt;&#x2F;code&gt;, and as a Rust&#x2F;cargo tool, users might expect to be able to forbid a lint in &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; as in other tools.&lt;&#x2F;p&gt;
&lt;p&gt;If you have any thoughts on this, I&#x27;d love to hear what you think! Feel free to post on the blog &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;suaviloquence&#x2F;blog&#x2F;issues&#x2F;3&quot;&gt;GitHub issue&lt;&#x2F;a&gt; or in the &lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.zulipchat.com&#x2F;#narrow&#x2F;stream&#x2F;421156-gsoc&#x2F;topic&#x2F;Project.3A.20Adding.20lint.20configuration.20to.20cargo-semver-checks&quot;&gt;project Zulip stream&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;As for &lt;code&gt;force-warn&lt;&#x2F;code&gt;, I personally would need some convincing to see why it would be useful to add to &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;, as I haven&#x27;t even seen it used in &lt;code&gt;rustc&lt;&#x2F;code&gt; lints yet (that I know of).&lt;&#x2F;p&gt;
&lt;h1 id=&quot;configuration&quot;&gt;configuration&lt;&#x2F;h1&gt;
&lt;p&gt;The point of these lint levels is to be able to set them, of course, and there are so many different ways to configure them in the ecosystem.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cli-flags&quot;&gt;cli flags&lt;&#x2F;h2&gt;
&lt;p&gt;rustc (and clippy, which uses rustc&#x27;s interface) let the user pass &lt;code&gt;--allow&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;-A&lt;&#x2F;code&gt;, &lt;code&gt;--warn&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;-W&lt;&#x2F;code&gt;, &lt;code&gt;--force-warn&lt;&#x2F;code&gt;, &lt;code&gt;--deny&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;-D&lt;&#x2F;code&gt;, &lt;code&gt;--forbid&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;-F&lt;&#x2F;code&gt; with the qualified lint name (e.g., &lt;code&gt;clippy::absurd_extreme_comparisons&lt;&#x2F;code&gt; or &lt;code&gt;dead_code&lt;&#x2F;code&gt; == &lt;code&gt;rust::dead_code&lt;&#x2F;code&gt;) to set the lint level at the scope of the compile target. Ideally, a user of &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; would be able to do this for our checks.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;note: for rustc-registered lints, these can also be passed to &lt;code&gt;RUSTFLAGS&lt;&#x2F;code&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cargo-toml-tables&quot;&gt;Cargo.toml tables&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.github.io&#x2F;rfcs&#x2F;3389-manifest-lint.html&quot;&gt;&lt;code&gt;[lints]&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nightly&#x2F;cargo&#x2F;reference&#x2F;manifest.html#the-lints-section&quot;&gt;cargo book&lt;&#x2F;a&gt;) table in the Cargo manifest was added to declare package or workspace-scope lint levels. Currently, this only works with &lt;code&gt;rust&lt;&#x2F;code&gt;, &lt;code&gt;clippy&lt;&#x2F;code&gt;, and &lt;code&gt;rustdoc&lt;&#x2F;code&gt; lints, so &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; would not be able to use it as of yet. However, we can simulate the syntax in a &lt;code&gt;[{package,workspace}.metadata]&lt;&#x2F;code&gt; subtable until it is stable for third-party tools to have entries in the lints table.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;module-item-attributes&quot;&gt;module&#x2F;item attributes&lt;&#x2F;h2&gt;
&lt;p&gt;For rustc lints, you can add configuration like &lt;code&gt;#![allow(lint)]&lt;&#x2F;code&gt; outer attribute to a module as well as attributes like &lt;code&gt;#[warn(lint)]&lt;&#x2F;code&gt; on an inner item itself to apply that configuration to just the module&#x2F;item. Currently, &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; has a less granular version of this by adding &lt;code&gt;#[doc(hidden)]&lt;&#x2F;code&gt; to an item to exempt it from semver guarantees, but adding this is a breaking change.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lint-groups&quot;&gt;lint groups&lt;&#x2F;h2&gt;
&lt;p&gt;Lints in rustc and clippy are organized into groups&#x2F;collections of lints that can all be configured at once (e.g., &lt;code&gt;#[warn(clippy::pedantic)]&lt;&#x2F;code&gt;). It&#x27;s definitely a goal of &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; to implement this as well, for instance with a &lt;code&gt;suspicious&lt;&#x2F;code&gt; group of warn-by-default lints that are not necessarily breaking changes at all times, but usually indicate breakage of a semver guarantee somewhere.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;precedence&quot;&gt;precedence&lt;&#x2F;h2&gt;
&lt;p&gt;When there are multiple levels set for a given lint, we have to figure out which one takes priority, which can get complicated:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;later CLI flags take priority over earlier CLI flags (&lt;code&gt;--deny clippy::cast_sign_loss --allow clippy::pedantic --warn clippy::cast_possible_truncation&lt;&#x2F;code&gt;) would make &lt;code&gt;cast_possible_truncation&lt;&#x2F;code&gt; warn, but &lt;code&gt;cast_sign_loss&lt;&#x2F;code&gt; allow (both lints are in the &lt;code&gt;pedantic&lt;&#x2F;code&gt; group).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;the &lt;code&gt;[lints]&lt;&#x2F;code&gt; table has a &lt;code&gt;priority&lt;&#x2F;code&gt; key for each entry, such that lower is a lower priority, and higher higher (default is zero if not set). Because in TOML key order is not guaranteed, the order of the lints in the lint table should not be used for configuration, and users should set &lt;code&gt;priority&lt;&#x2F;code&gt; instead if there is a conflict.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;rustc&lt;&#x2F;code&gt; uses a stack of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;blob&#x2F;f00b02e6bbe63707503f058fb87cc3e2b25991ac&#x2F;compiler&#x2F;rustc_lint&#x2F;src&#x2F;levels.rs#L75&quot;&gt;&lt;code&gt;LintSet&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;s, based on how deep the scope is where the configuration is added (i.e., an item is on the top of the stack, its module is in the middle, and command line flags are at the bottom of the stack)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;CLI flags override the &lt;code&gt;[lints]&lt;&#x2F;code&gt; table&lt;&#x2F;p&gt;
&lt;details&gt;
&lt;summary&gt;test for this&lt;&#x2F;summary&gt;
&lt;p&gt;Cargo.toml:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# ...
&lt;&#x2F;span&gt;&lt;span&gt;[lints]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;unused_variables &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;deny&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;main.rs:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{};
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;$ cargo clippy&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;cargo clippy
&lt;&#x2F;span&gt;&lt;span&gt;    Checking tst v0.1.0 (&#x2F;tmp&#x2F;tst)
&lt;&#x2F;span&gt;&lt;span&gt;error: unused variable: `a`
&lt;&#x2F;span&gt;&lt;span&gt; --&amp;gt; src&#x2F;main.rs:2:9
&lt;&#x2F;span&gt;&lt;span&gt;  |
&lt;&#x2F;span&gt;&lt;span&gt;2 |     let a = 0;
&lt;&#x2F;span&gt;&lt;span&gt;  |         ^ help: if this is intentional, prefix it with an underscore: `_a`
&lt;&#x2F;span&gt;&lt;span&gt;  |
&lt;&#x2F;span&gt;&lt;span&gt;  = note: requested on the command line with `-D unused-variables`
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;error: could not compile `tst` (bin &amp;quot;tst&amp;quot;) due to 1 previous error
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;$ cargo clippy -- -Aunused_variables&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;Checking tst v0.1.0 (&#x2F;tmp&#x2F;tst)
&lt;&#x2F;span&gt;&lt;span&gt;Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.05s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;details&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;and of course, if &lt;code&gt;forbid&lt;&#x2F;code&gt; is found at any point, it overrides any other configuration&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Looking at &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;, we would need to calculate this precedence ourselves, at least right now. However, it seems like we would just need to worry about CLI flags, package tables, and workspace tables, and potentially &lt;code&gt;forbid&lt;&#x2F;code&gt;, as you can&#x27;t annotate an item or module. Additionally, we want to be able to configure the &lt;em&gt;required semver version bump&lt;&#x2F;em&gt; as well as the lint level. There is the future possibility of configuring this (i.e., tool-specified configuration) in the &lt;code&gt;[lints]&lt;&#x2F;code&gt; table, such as &lt;code&gt;enum_missing = { level = &amp;quot;warn&amp;quot;, semver = &amp;quot;minor&amp;quot; }&lt;&#x2F;code&gt;, but this functionality is not available in the &lt;code&gt;[lints]&lt;&#x2F;code&gt; table yet. However, we can add it to our own &lt;code&gt;[package.metadata]&lt;&#x2F;code&gt; table, then integrate with &lt;code&gt;[lints]&lt;&#x2F;code&gt; when we can. However, we would need our own way to configure this at the command line, as there&#x27;s little precedent for providing arguments to lints in tools like clippy.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;consistency&quot;&gt;consistency&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;annotate-snippets&quot;&gt;annotate-snippets&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;annotate_snippets&quot;&gt;&lt;code&gt;annotate-snippets&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; is a crate that creates &lt;code&gt;rustc&lt;&#x2F;code&gt;-like formatted diagnostics for code. You can provide it with level, text, and attach other related diagnostics to the error message.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;cargo&lt;&#x2F;code&gt;&#x27;s linting tool is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;cargo&#x2F;blob&#x2F;95eeafa3ba513a630d32aecf2818734aeb06b540&#x2F;src&#x2F;cargo&#x2F;util&#x2F;lints.rs#L6&quot;&gt;currently using it&lt;&#x2F;a&gt;, but tools like &lt;code&gt;rustc&lt;&#x2F;code&gt; and &lt;code&gt;clippy&lt;&#x2F;code&gt; are using &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nightly&#x2F;nightly-rustc&#x2F;rustc_errors&#x2F;struct.DiagCtxt.html&quot;&gt;rustc-internal diagnostic rendering&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;compiler-lints&quot;&gt;compiler lints&lt;&#x2F;h2&gt;
&lt;p&gt;Tools like &lt;code&gt;clippy&lt;&#x2F;code&gt; register with &lt;code&gt;rustc&lt;&#x2F;code&gt;&#x27;s linter using &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;nightly-rustc&#x2F;rustc_lint_defs&#x2F;macro.declare_tool_lint.html&quot;&gt;&lt;code&gt;declare_tool_lint!&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. &lt;code&gt;rustc&lt;&#x2F;code&gt; then handles configuration of lint levels and running the lints as necessary, and the tools define the behavior.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cargo-lints&quot;&gt;cargo lints&lt;&#x2F;h2&gt;
&lt;p&gt;When lints have to run over a crate (including a &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt; manifest), it makes less sense to use &lt;code&gt;rustc&lt;&#x2F;code&gt;&#x27;s lint handling. cargo&#x27;s linting is relatively new, and it seems to roll its own configuration, at least for now. (see &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;cargo&#x2F;blob&#x2F;master&#x2F;src&#x2F;cargo&#x2F;util&#x2F;lints.rs#L263&quot;&gt;&lt;code&gt;struct Lint&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;cargo&#x2F;blob&#x2F;95eeafa3ba513a630d32aecf2818734aeb06b540&#x2F;src&#x2F;cargo&#x2F;util&#x2F;lints.rs#L386&quot;&gt;&lt;code&gt;level_priority&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;consequences-for-cargo-semver-checks&quot;&gt;consequences for &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The lints in &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; are much closer to cargo&#x27;s than those of rustc and clippy&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#clippy-cargo&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. Because we need access to the whole API of a crate (and a comparison baseline version of that crate), it doesn&#x27;t seem very feasible to use compiler lints.&lt;&#x2F;p&gt;
&lt;p&gt;What &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; does differently than other tools is that lints are created &lt;em&gt;declaratively&lt;&#x2F;em&gt; with a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;trustfall&quot;&gt;Trustfall&lt;&#x2F;a&gt; query over the crate&#x27;s API, instead of as a Rust constant. This means that once&#x2F;if cargo exposes the functionality for third-party crates to register cargo lints, it may not be plug-and-play (especially if it expects something with a &lt;code&gt;&#x27;static&lt;&#x2F;code&gt; lifetime, as we need to parse them at runtime).&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m not sure how well we can integrate with cargo lints right now, and it seems like I will have to write my own level precedence calculator. However, we definitely want to design to integrate with cargo in the future, and if you have any suggestions for how to do that, I&#x27;d love to hear them. Additionally, maintaining interface (like CLI) compatibility with tools like rustc is also a goal as much as we can, even if we don&#x27;t use the same lint mechanisms under the hood.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;acknowledgements&quot;&gt;acknowledgements&lt;&#x2F;h1&gt;
&lt;p&gt;Thanks to Ed Page, Scott Schafer, and Predrag Gruevski for great info and pointers, especially about &lt;code&gt;annotate-snippets&lt;&#x2F;code&gt; and cargo&#x27;s linting in the &lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.zulipchat.com&#x2F;#narrow&#x2F;stream&#x2F;421156-gsoc&#x2F;topic&#x2F;Project.3A.20Adding.20lint.20configuration.20to.20cargo-semver-checks&quot;&gt;Zulip thread&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Again, I&#x27;d love to hear any feedback, either in the Zulip, as a comment on the GitHub issue for this post, or by email.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;forbid&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;In &lt;code&gt;rustc&lt;&#x2F;code&gt;, you can pass &lt;code&gt;--cap-lints [level]&lt;&#x2F;code&gt; and it will suppress all lints at a stricter level by capping them to the passed level. This makes even something with &lt;code&gt;forbid&lt;&#x2F;code&gt; an &lt;code&gt;allow&lt;&#x2F;code&gt; or &lt;code&gt;warn&lt;&#x2F;code&gt; if capped.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;hr &#x2F;&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;clippy-cargo&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;Although &lt;code&gt;clippy&lt;&#x2F;code&gt; has cargo integration and lints parts of Cargo.toml as well; see &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&#x2F;blob&#x2F;76eee82e79e736c4cef6ee9f755f58e752b9f58a&#x2F;clippy_lints&#x2F;src&#x2F;cargo&#x2F;mod.rs&quot;&gt;&lt;code&gt;cargo&#x2F;mod.rs&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (it makes a &lt;code&gt;Cargo&lt;&#x2F;code&gt; lint pass, and calls &lt;code&gt;cargo metadata&lt;&#x2F;code&gt; - we could technically do this for &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;, but we would need a lot of refactoring, and it would be a little hacky)&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>GSoC &#x27;24 Intro</title>
        <published>2024-05-07T00:00:00+00:00</published>
        <updated>2024-05-07T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://blog.mcarr.one/gsoc-24-intro/" type="text/html"/>
        <id>https://blog.mcarr.one/gsoc-24-intro/</id>
        
        <content type="html">&lt;p&gt;I&#x27;m super excited to be working on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&quot;&gt;&lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; this summer! I&#x27;ll be posting updates here under the &lt;a href=&quot;&#x2F;tags&#x2F;gsoc24&quot;&gt;&lt;code&gt;gsoc24&lt;&#x2F;code&gt; tag&lt;&#x2F;a&gt; as I work on it this summer. I love the philosophy of the tool and I think it&#x27;s a great example of the ideas of the Rust language and ecosystem that let people make correct code more easily.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;semantic-versioning-and-cargo-semver-checks-what-am-i-working-on&quot;&gt;semantic versioning and &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;: what am i working on?&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;em&gt;this is a little introduction to the problem that &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; tries to solve, and how it solves it. if you&#x27;re already familiar with the project, feel free to jump to the &lt;a href=&quot;https:&#x2F;&#x2F;blog.mcarr.one&#x2F;gsoc-24-intro&#x2F;#planned-work&quot;&gt;planned work&lt;&#x2F;a&gt; section.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I can tell my friends and family that I&#x27;m &amp;quot;adding lint-level configuration to &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;,&amp;quot; but judging by the blank stares I get, that doesn&#x27;t make it any clearer what I&#x27;m actually working on. However, we all, even non-programmers, have some experience with the problems that semantic versioning and &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; try to solve:&lt;&#x2F;p&gt;
&lt;p&gt;Have you ever updated an app on your phone only to open it and find out that they, for whatever reason, removed a feature you used to use? It probably broke your workflow, and there probably was little to no warning whenn you went to update the app that this would happen. This is essentially the problem that semantic versioning works to solve.&lt;&#x2F;p&gt;
&lt;p&gt;With a piece of software that uses semantic versioning (shortened form: semver), its software version takes the form &lt;code&gt;x.y.z&lt;&#x2F;code&gt;, where &lt;code&gt;x&lt;&#x2F;code&gt; is the &lt;em&gt;major&lt;&#x2F;em&gt; version number, &lt;code&gt;y&lt;&#x2F;code&gt; is the &lt;em&gt;minor&lt;&#x2F;em&gt; version number, and &lt;code&gt;z&lt;&#x2F;code&gt; is the &lt;em&gt;patch&lt;&#x2F;em&gt; number. Take an application &lt;code&gt;cat-petter&lt;&#x2F;code&gt; with version &lt;code&gt;1.5.2&lt;&#x2F;code&gt;. If the developers just fixed bugs or added minor improvements, they can just bump the &lt;em&gt;patch&lt;&#x2F;em&gt; version and release &lt;code&gt;1.5.3&lt;&#x2F;code&gt;, and users of this app will know that they can upgrade from 1.5.2 to 1.5.3 without any breaking changes. However, let&#x27;s say the developers add a feature to pet &lt;em&gt;all&lt;&#x2F;em&gt; pets in a way that &lt;em&gt;doesn&#x27;t break&lt;&#x2F;em&gt; the original workflow of petting cats (here&#x27;s a &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;cargo&#x2F;reference&#x2F;semver.html#fn-generalize-compatible&quot;&gt;rust analog: generalizing a function&lt;&#x2F;a&gt;), they should bump the &lt;em&gt;minor&lt;&#x2F;em&gt; version to show that this feature was added to version &lt;code&gt;1.6.0&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s important to note that this only applies if it doesn&#x27;t make the original use-case in 1.5.2 stop working. Say for example, that the developers wanted (for some reason) to make &lt;code&gt;cat-sitter&lt;&#x2F;code&gt; pet dogs instead of cats. This new version of the app would break for someone using 1.5.2, so they should release version &lt;code&gt;2.0.0&lt;&#x2F;code&gt;, bumping the major version number, to show this.&lt;&#x2F;p&gt;
&lt;p&gt;Thus, you, the user of the app, can see the version change when you go to update the app. If it&#x27;s just a patch bump, the contract of semantic versioning assures you that you can update it without breaking your workflow. If it&#x27;s a minor version bump, you will know that some new features were added, but it &lt;em&gt;generally&lt;&#x2F;em&gt; will still work the way you used to use it.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; If it&#x27;s a major version bump, though, you know that there is the possibility to break your workflow, so you should be careful and research your decision to upgrade.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;enter-cargo-semver-checks&quot;&gt;enter &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;There&#x27;s one problem, though: as a developer, keeping track of all these changes is &lt;em&gt;hard&lt;&#x2F;em&gt;. For Rust library crate developers, there&#x27;s a &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;cargo&#x2F;reference&#x2F;semver.html&quot;&gt;cargo guide&lt;&#x2F;a&gt; on minor and major-breaking changes, but it&#x27;s long, and it&#x27;s non-exhaustive. It&#x27;s a lot to keep track of.&lt;&#x2F;p&gt;
&lt;p&gt;Do you know what is good at remembering and keeping track of things given well-defined rules? Computers are. Just like the philosophy of the Rust language is to eliminate entire classes of programming errors by checking your programs at compile time, we can also check for semantic versioning violations when we are ready to release a new version of our library.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&quot;&gt;&lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; is a tool that checks library crates for whether they have upheld the semantic versioning guarantees, or whether they need to make a minor or major version bump based on how the library code has changed between versions. It does this by applying lints, one check for each different way that major or minor changes can occur, over the library&#x27;s API surface, using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;trustfall&quot;&gt;Trustfall&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;rustdoc&#x2F;index.html&quot;&gt;&lt;code&gt;rustdoc&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.
It&#x27;s a great tool that greatly improves the developer experience, and, by reducing semver violations, builds more trust in the semver guarantees across the whole Rust ecosystem. A library crate can add it to their continues integration tests, and efficiently track whether they have accidentally broken semver before they push the changes.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;planned-work&quot;&gt;planned work: how am i enhancing &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; this summer?&lt;&#x2F;h1&gt;
&lt;p&gt;However, there are lots of reasons, especially for large, mature library crates, why a project can&#x27;t adhere completely to the way &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; interprets the semantic versioning guidelines. For example, one project may not consider it a minor-level change just to &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;cargo&#x2F;reference&#x2F;semver.html#item-new&quot;&gt;add a public item&lt;&#x2F;a&gt;. Currently, this would prevent them from adding &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; to their CI pipeline without a lot of potentially-hacky workarounds. We don&#x27;t want this! All libraries should be able to use this tool without having to agree completely with its default interpretation of the semver spec.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lint-level-configuration&quot;&gt;lint-level configuration&lt;&#x2F;h2&gt;
&lt;p&gt;We want to be able to configure two things about each individual lint in &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;: whether to &lt;code&gt;allow&lt;&#x2F;code&gt;, &lt;code&gt;warn&lt;&#x2F;code&gt;, or &lt;code&gt;deny&lt;&#x2F;code&gt; (i.e., raise an error) when we detect it, and what semver level (&lt;code&gt;major&lt;&#x2F;code&gt; or &lt;code&gt;minor&lt;&#x2F;code&gt;) is it a breaking change for.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s a general outline of what I&#x27;m planning on adding to the tool:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cli-configuration&quot;&gt;CLI configuration&lt;&#x2F;h3&gt;
&lt;p&gt;Like &lt;code&gt;clippy&lt;&#x2F;code&gt; and other linting tools, we want to be able to specify the error and semver levels while running the tool: for example &lt;code&gt;cargo semver-checks [...] -Afunction_export_name_hidden -Dtrait_method_now_hidden=minor -Wrepr_c_removed=minor&lt;&#x2F;code&gt; would make the &lt;code&gt;function_export_name_hidden&lt;&#x2F;code&gt; allowed&#x2F;not error at all, and the &lt;code&gt;trait_method_now_hidden&lt;&#x2F;code&gt; lint now only a minor-version bump, and make the &lt;code&gt;repr_c_removed&lt;&#x2F;code&gt; both a warning and only a minor-breaking change, and all the different permutations of this.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cargo-toml-config&quot;&gt;Cargo.toml config&lt;&#x2F;h3&gt;
&lt;p&gt;There is a &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;cargo&#x2F;reference&#x2F;manifest.html#the-lints-section&quot;&gt;&lt;code&gt;[lints]&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; table in Cargo.toml, but it&#x27;s not yet available to configure third-party tools like &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; with. As of now, we can make a &lt;code&gt;[package.metadata]&lt;&#x2F;code&gt; section using the same syntax as the lints table, and then move over to that when it&#x27;s stabilized for third-party tools. When this is added, a user will be able to configure &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; in their Cargo.toml like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[package.metadata.cargo-semver-checks]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# set the semver level to minor for this lint
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;trait_method_now_hidden &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;minor&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# set the semver level to minor and only emit a warning
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# instead of an error on violation for this lint
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;repr_c_removed &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;level &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;warn&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;semver &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;minor&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# ignore all lints of this type
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;function_export_name_hidden &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;allow&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will also be added to &lt;code&gt;[workspace.metadata]&lt;&#x2F;code&gt; to configure at the workspace level as well.&lt;&#x2F;p&gt;
&lt;p&gt;Additionally, I&#x27;ll focus on adding great and thorough tests and documentation to these additions to make &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; even more correct and easy to use and adopt. I&#x27;ll be posting updates at least every week under the &lt;a href=&quot;&#x2F;tags&#x2F;gsoc24&quot;&gt;&lt;code&gt;gsoc24&lt;&#x2F;code&gt; tag&lt;&#x2F;a&gt; here to document my progress.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;more-possibilities&quot;&gt;more possibilities&lt;&#x2F;h2&gt;
&lt;p&gt;This added configuration also opens up some more possibilities I&#x27;ll work on if time allows during the summer or after if needed:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Add a group of &lt;code&gt;suspicious&lt;&#x2F;code&gt; lints that are not necessarily semver-breaking on their own, but are suspicious; they indicate that something is &lt;em&gt;probably&lt;&#x2F;em&gt; wrong but there is a possibility it does not break semver. These will use the new configuration feature of being &lt;code&gt;warn&lt;&#x2F;code&gt; by default instead of &lt;code&gt;deny&lt;&#x2F;code&gt;, because they are warnings, not errors.&lt;&#x2F;li&gt;
&lt;li&gt;Allow CI targets like GitHub actions be configured directly in the action configuration for lint-level configuration, which will make it even easier and more flexible to use &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; in a CI pipeline&lt;&#x2F;li&gt;
&lt;li&gt;Configure whether to apply a lint on a specific module or even item-level basis, such as with attributes as tools like &lt;code&gt;clippy&lt;&#x2F;code&gt; do&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I&#x27;m super excited to be able to work on &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; this summer and beyond! Feel free to watch the &lt;a href=&quot;&#x2F;tags&#x2F;gsoc24&quot;&gt;&lt;code&gt;gsoc24&lt;&#x2F;code&gt; tag&lt;&#x2F;a&gt; for updates on what I&#x27;m doing. You can also find me on GitHub &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;suaviloquence&quot;&gt;@suaviloquence&lt;&#x2F;a&gt; or by email (listed on my GitHub profile).&lt;&#x2F;p&gt;
&lt;h1 id=&quot;footnotes&quot;&gt;footnotes&lt;&#x2F;h1&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;note that this is not always the case: for example, from the cargo semver guide: &lt;em&gt;&amp;quot;Some changes are marked as “minor”, even though they carry the potential risk of breaking a build. This is for situations where the potential is extremely low, and the potentially breaking code is unlikely to be written in idiomatic Rust, or is specifically discouraged from use.&amp;quot;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
        
    </entry>
</feed>
